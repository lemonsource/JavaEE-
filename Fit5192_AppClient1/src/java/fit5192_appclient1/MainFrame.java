/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fit5192_appclient1;

import fit5192.assignment.repository.entities.Commodityinfo;
//import fit5192.A1.Entities.Commodity;
//import fit5192.A1.controllers.CommodityController;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.ejb.EJB;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wongzhe
 */
public class MainFrame extends javax.swing.JFrame {
    
    /**
     * Creates new form MainFrame
     * @param actionListener
     * @param listSelectionListener
     */
    public MainFrame(ActionListener actionListener, ListSelectionListener listSelectionListener) {
        initComponents();
        this.commodityTable.getSelectionModel().addListSelectionListener(listSelectionListener);
        this.searchButton.addActionListener(actionListener);
        this.addButton.addActionListener(actionListener);
        this.deleteButton.addActionListener(actionListener);
        this.updateButton.addActionListener(actionListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        commodityTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        labelTextField = new javax.swing.JTextField();
        titleTextField = new javax.swing.JTextField();
        priceTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        commodityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Label", "Title", "Price", "AvailableNum"
            }
        ));
        jScrollPane1.setViewportView(commodityTable);

        jLabel1.setText("ID");

        jLabel2.setText("Label");

        jLabel3.setText("Title");

        jLabel4.setText("Budget");

        labelTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelTextFieldActionPerformed(evt);
            }
        });

        titleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleTextFieldActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Display All");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idTextField)
                            .addComponent(priceTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(titleTextField)
                            .addComponent(labelTextField)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 865, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 34, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(labelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(titleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addButtonActionPerformed

    private void labelTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_labelTextFieldActionPerformed

    private void titleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleTextFieldActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateButtonActionPerformed
    public Commodityinfo generateCommodity(){
        Commodityinfo commodity = new Commodityinfo();
        commodity.setCommodityid(Integer.parseInt(idTextField.getText()));
        commodity.setLabel(labelTextField.getText());
        commodity.setPrice(Integer.parseInt(priceTextField.getText()));
        commodity.setTitle(titleTextField.getText());
//        commodity.setItemsnum(Integer.parseInt(TotalNumberTextField.getText()));
        return commodity;
    }
    public void addCommodity(){
        Commodityinfo commodity = new Commodityinfo();
        commodity.setCommodityid(Integer.parseInt(idTextField.getText()));
        commodity.setLabel(labelTextField.getText());
        commodity.setPrice(Integer.parseInt(priceTextField.getText()));
        commodity.setTitle(titleTextField.getText());
//        commodity.setItemstotalnum(Integer.parseInt(TotalNumberTextField.getText()));
        System.out.println(commodity.toString());
        Main.commodityrepository.AddCommodity(commodity);
        updateAll();        
    }
    

    //updatecommodity
//    public void updateCommodity(){
//        Commodityinfo commodity = generateCommodity();
//        Main.commodityrepository.EditCommodity(commodity);
//        updateAll();
//    }
    //delete commodity operation
    public void deleteCommodity(){
        int id = Integer.parseInt(idTextField.getText());
         System.out.println("delete "+ id +" start");
        Main.commodityrepository.RemoveCommodity(id);
        updateAll();
    }
    
    
    public void updateAll() {
        List<Commodityinfo> commoditys = Main.commodityrepository.getAllCommodities();
        displayData(commoditys);
    }
    
    public void clearInput(){
       this.clearTextFields();
    }
                
    public void clearTextFields(){
        this.idTextField.setText("");
        this.labelTextField.setText("");
        this.priceTextField.setText("");
    }            
    public void clearTable(){
        int numberOfRow = this.commodityTable.getModel().getRowCount();
        
        if (numberOfRow > 0) {
            DefaultTableModel tableModel = (DefaultTableModel) this.commodityTable.getModel();
            for (int index = (numberOfRow - 1); index >= 0; index --) {
                tableModel.removeRow(index);
            }            
        }
    }

    

    
    // starting    从textfied返还商品的属性功能
    public int getCommodityId(){
        String id =this.getIdTextField().getText();
        return id == null||id.isEmpty() ? 0 :Integer.parseInt(id);
    }
    
    public String getCommodityTitle(){
        String title =this.getTitleTextField().getText();
        return title ==null||title.isEmpty()? null :title;
    }
    public String getCommodityLabel(){
        String label = this.getLabelTextField().getText();
        return label ==null||label.isEmpty()? null :label;
    }
    
    public int getCommodityBudget(){
        String price = this.getPriceTextField().getText();
        return price == null || price.isEmpty() ? 0 : Integer.parseInt(price);
    }
   //ending
    
    

//    public JTextField getTotalNumberTextField() {
//        return TotalNumberTextField;
//    }

    public JButton getAddButton() {
        return addButton;
    }

    public JTable getCommodityTable() {
        return commodityTable;
    }

    public JButton getDeleteButton() {
        return deleteButton;
    }

    public JTextField getIdTextField() {
        return idTextField;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public JLabel getjLabel3() {
        return jLabel3;
    }

    public JLabel getjLabel4() {
        return jLabel4;
    }

//    public JLabel getjLabel5() {
//        return jLabel5;
//    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public JTextField getLabelTextField() {
        return labelTextField;
    }

    public JTextField getPriceTextField() {
        return priceTextField;
    }

    public JButton getSearchButton() {
        return searchButton;
    }

    public JTextField getTitleTextField() {
        return titleTextField;
    }

    public JButton getUpdateButton() {
        return updateButton;
    }
     
    
    //Display
    
    public void displayMessageInDialog(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

//    public void displaySelectedPropertyDetails(Commodityinfo commodity) {
//        this.idTextField.setText(String.valueOf(commodity.getCommodityid()));
//        this.labelTextField.setText(commodity.getLabel());
//        this.titleTextField.setText(String.valueOf(commodity.getTitle()));
//        this.priceTextField.setText(String.valueOf(commodity.getPrice())); 
//        this.TotalNumberTextField.setText(String.valueOf(commodity.getItemstotalnum()));
//    }
    
    public void displaySelectedPropertyDetails(Commodityinfo commodity) {
        this.clearTable();
        this.clearInput();
        ((DefaultTableModel)this.commodityTable.getModel()).addRow(new Object[]{commodity.getCommodityid(),
                                                                                commodity.getLabel(),
                                                                                commodity.getTitle(),
                                                                                commodity.getPrice(),
                                                                                commodity.getItemsnum()});

    }
    
    public void displaySelectedPropertyDetails(List<Commodityinfo> commodities) {
        this.clearTable();
        this.clearInput();
        
        for(Commodityinfo commodity : commodities){
            ((DefaultTableModel)this.commodityTable.getModel()).addRow(new Object[]{commodity.getCommodityid(),
                                                                                    commodity.getLabel(),
                                                                                    commodity.getTitle(),
                                                                                    commodity.getPrice(),
                                                                                    commodity.getItemsnum()});
        }
    }
    public void displayData(List<Commodityinfo> commodities){
        clearTable();
        for(Commodityinfo commodity: commodities){
              ((DefaultTableModel)this.commodityTable.getModel()).addRow(new Object[]{commodity.getCommodityid(), commodity.getLabel(), commodity.getTitle(),commodity.getPrice(),commodity.getItemsnum()});
        }
        
    }
    public void displayAllCommodityInfo(){
        this.clearTable();
        this.clearInput();
        List<Commodityinfo> commodities =Main.commodityrepository.getAllCommodities();
        this.displayData(commodities);
        this.setVisible(true);
    }
    public boolean isPropertySelected() {
        System.out.println(commodityTable.getSelectedRow());
        return (this.commodityTable.getSelectedRow() >= 0);
    }
    public int getSelectedPropertyId() {
        int selectedRowIndex = this.commodityTable.getSelectedRow();
        
        String propertyId = this.commodityTable.getValueAt(selectedRowIndex, 0).toString();
        return Integer.parseInt(propertyId); 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTable commodityTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField labelTextField;
    private javax.swing.JTextField priceTextField;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField titleTextField;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
